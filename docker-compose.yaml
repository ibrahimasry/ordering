services:
  order-processing-service:
    build:
      context: .
      dockerfile: ./apps/order-processing/Dockerfile
      target: development
    command: pnpm run start:dev order-processing
    env_file:
      - ./apps/order-processing/.env
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
    depends_on:
      - kafka
      - zookeeper
      - db
    environment:
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgres://user:password@db:5432/mydatabase
    networks:
      - app-network

  order-creation-service:
    build:
      context: .
      dockerfile: ./apps/order-creation/Dockerfile
      target: development
    command: pnpm run start:dev order-creation
    env_file:
      - ./apps/order-creation/.env
    ports:
      - '3001:3001'
    volumes:
      - .:/usr/src/app
    depends_on:
      - kafka
      - zookeeper
      - db
    networks:
      - app-network

  notification-service:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
      target: development
    command: pnpm run start:dev notifications
    env_file:
      - ./apps/notifications/.env
    ports:
      - '3002:3002'
    volumes:
      - .:/usr/src/app
    depends_on:
      - kafka
      - zookeeper
      - db
    networks:
      - app-network

  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network
  kafka:
    image: 'docker.io/bitnami/kafka:2-debian-10'
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

    networks:
      - app-network

  db:
    image: postgres:latest
    container_name: postgres_db
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=order
      - POSTGRES_PASSWORD=order
      - POSTGRES_DB=ordering
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
    driver: local
